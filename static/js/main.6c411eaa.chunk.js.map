{"version":3,"sources":["components/Table/index.js","components/Container/index.js","components/Navbar/index.js","components/Header/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","className","onClick","sortBy","data","map","row","key","email","first_name","last_name","gender","Container","style","children","Navbar","href","Header","headerText","Form","state","firstName","handleInputChange","event","target","name","value","setState","handleFormSubmit","preventDefault","alert","handleSearch","this","onSubmit","id","onChange","type","placeholder","Component","App","direction","bind","console","log","sort","a","b","toLowerCase","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c411eaa.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nexport default function Table(props){\r\n    return (\r\n        <table className=\"table table-dark\">\r\n            <thead>\r\n            </thead>\r\n               \r\n               <tbody>\r\n               <tr>\r\n                    <th><button onClick={() => props.sortBy('first_name')}>First Name</button></th>\r\n                    <th>Last Name</th>\r\n                    <th>Phone</th>\r\n                    <th>Email</th>\r\n                </tr>\r\n                    {\r\n                        props.data.map(row => (\r\n                        <tr key={row.email}>\r\n                            <td>{row.first_name}</td>\r\n                            <td>{row.last_name}</td>\r\n                            <td>{row.gender}</td>\r\n                            <td>{row.email}</td>\r\n                        </tr>\r\n                    ))\r\n                    }\r\n                </tbody>\r\n           \r\n        </table>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nconst Container = (props) =>  {\r\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <a href=\"/\">Welcome</a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Header = (props)=> {\r\n    return(\r\n        <header>\r\n            {props.headerText}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Form extends Component {\r\n  // Setting the component's initial state\r\n  state = {\r\n    firstName: \"\"\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { name, value } = event.target;\r\n\r\n    // Updating the input's state\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n\r\n  handleFormSubmit = event => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    event.preventDefault();\r\n\r\n    // Alert the user their first and last name, clear `this.state.firstName` and `this.state.lastName`, clearing the inputs\r\n    alert(`Add employee: ${this.state.firstName} `)\r\n   \r\n  };\r\n\r\n  handleSearch = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  render() {\r\n    // Notice how each input has a `value`, `name`, and `onChange` prop\r\n    return (\r\n      <div>\r\n        <p>\r\n          Filter by name: {this.state.firstName}\r\n        </p>\r\n        <form onSubmit={this.handleFormSubmit} className=\"form\">\r\n          <input\r\n            id='firstName'\r\n            value={this.state.firstName}\r\n            name=\"firstName\"\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"First Name\"\r\n          />\r\n          <button onClick={this.handleSearch}>Search</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './components/Table';\r\nimport Container from \"./components/Container\";\r\nimport Table from \"./components/Table\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Header from \"./components/Header\";\r\nimport Form from \"./components/Form\";\r\nimport data from './components/data/users.json'\r\n\r\nconst headerText = 'Employee Directory';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data: data,\r\n      direction: {\r\n        first_name: 'asc'\r\n      }\r\n    }\r\n    this.sortBy = this.sortBy.bind(this)\r\n  }\r\n\r\n  sortBy(key) {\r\n    if(this.state.direction[key] === 'asc'){\r\n      console.log(this.state.direction)\r\n      console.log(this.state)\r\n      this.setState({\r\n        data: data.sort((a, b) => {\r\n          if(a[key].toLowerCase() < b[key].toLowerCase())\r\n            return -1\r\n          else if (a[key].toLowerCase() > b[key].toLowerCase()) \r\n            return 1\r\n          else{\r\n            return 0\r\n          }\r\n        }),\r\n        direction: {first_name:'desc'}\r\n      })\r\n    } else if(this.state.direction[key] === 'desc'){\r\n      console.log(this.state.direction)\r\n      console.log(this.state)\r\n      this.setState({\r\n        data: data.sort((a, b) => {\r\n          if(a[key].toLowerCase() > b[key].toLowerCase())\r\n            return -1\r\n          else if (a[key].toLowerCase() < b[key].toLowerCase()) \r\n            return 1\r\n          else{\r\n            return 0\r\n          }\r\n        }),\r\n        direction: {first_name: 'asc'}\r\n      })\r\n    } else {\r\n      console.log(this.state.direction)\r\n      console.log('you broke my sorter')\r\n    }\r\n  }\r\n  \r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\"> \r\n          <Header headerText = {headerText} />\r\n          <Navbar />\r\n          <Container style={{ minHeight: \"80%\" }}>\r\n            <Table \r\n            data = {this.state.data}\r\n            sortBy={this.sortBy}\r\n            />\r\n            <Form />\r\n          </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}