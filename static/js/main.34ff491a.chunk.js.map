{"version":3,"sources":["utils/API.js","components/Employee/index.js","components/Table/index.js","components/Container/index.js","components/Navbar/index.js","components/Header/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Employee","employees","React","useState","order","filteredEmployess","developerState","setDeveloperState","useEffect","API","then","results","console","log","data","filteredEmployees","employeeList","map","employee","className","key","id","value","name","first","email","Table","scope","Component","Container","props","style","children","Navbar","href","Header","headerText","Form","state","firstName","lastName","title","handleInputChange","event","target","setState","handleFormSubmit","preventDefault","alert","handleSearch","this","onSubmit","htmlFor","onChange","type","placeholder","onClick","App","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0VAEc,EACD,WACL,OAAQA,IAAMC,IAAI,iDCqCXC,EAtCE,SAAC,GAAgB,EAAfC,UAAgB,IAAD,EAEcC,IAAMC,SAAS,CACvDF,UAAW,GACXG,MAAO,UACPC,kBAAmB,KALO,mBAEvBC,EAFuB,KAEPC,EAFO,KAQ9BL,IAAMM,WAAU,WACZC,IAAeC,MAAK,SAAAC,GAClBC,QAAQC,IAAIF,EAAQG,KAAKH,SACzBJ,EAAkB,2BACbD,GADY,IAEfL,UAAWU,EAAQG,KAAKH,QACxBI,kBAAmBJ,EAAQG,KAAKH,gBAGnC,IAEL,IAAMK,EAAeV,EAAeL,UAAUgB,KAAI,SAAAC,GAE9C,OADAN,QAAQC,IAAIK,GAER,wBAAIC,UAAU,WAAWC,IAAKF,EAASG,GAAGC,OACtC,4BAAMJ,EAASG,GAAGC,OAClB,4BAAMJ,EAASK,KAAKC,OACpB,4BAAMN,EAASO,WAK3B,OACI,+BACMT,ICdCU,E,uKAfP,OACA,2BAAOP,UAAU,oBACb,+BACI,4BACI,wBAAIQ,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAGR,kBAAC,EAAD,W,GAZQC,aCGLC,EAJG,SAACC,GACjB,OAAO,yBAAKX,UAAU,YAAYY,MAAOD,EAAMC,OAAQD,EAAME,W,MCQhDC,MARf,WACI,OACI,yBAAKd,UAAU,UACX,uBAAGe,KAAK,KAAR,aCIGC,EARA,SAACL,GACZ,OACI,gCACKA,EAAMM,a,OC4EJC,G,kNA5EbC,MAAQ,CACNC,UAAW,GACXC,SAAU,GACVC,MAAO,I,EAGTC,kBAAoB,SAAAC,GAAS,MAEHA,EAAMC,OAAtBrB,EAFmB,EAEnBA,KAAMD,EAFa,EAEbA,MAGd,EAAKuB,SAAL,eACGtB,EAAOD,K,EAKZwB,iBAAmB,SAAAH,GAEjBA,EAAMI,iBAGNC,MAAM,iBAAD,OAAkB,EAAKV,MAAMC,UAA7B,YAA0C,EAAKD,MAAME,Y,EAO5DS,aAAe,SAAAN,GACbA,EAAMI,kB,uDAKN,OACE,6BACE,oDACyBG,KAAKZ,MAAMC,UADpC,IACgDW,KAAKZ,MAAME,UAE3D,0BAAMW,SAAUD,KAAKJ,iBAAkB3B,UAAU,QAC/C,2BAAOiC,QAAQ,aAAf,eACA,2BACE/B,GAAG,YACHC,MAAO4B,KAAKZ,MAAMC,UAClBhB,KAAK,YACL8B,SAAUH,KAAKR,kBACfY,KAAK,OACLC,YAAY,eAEd,2BAAOH,QAAQ,YAAf,cACA,2BACC/B,GAAG,WACFC,MAAO4B,KAAKZ,MAAME,SAClBjB,KAAK,WACL8B,SAAUH,KAAKR,kBACfY,KAAK,OACLC,YAAY,cAEb,2BAAOH,QAAQ,SAAf,cACD,2BACE/B,GAAG,QACHC,MAAO4B,KAAKZ,MAAMG,MAClBlB,KAAK,QACL8B,SAAUH,KAAKR,kBACfY,KAAK,OACLC,YAAY,cAEd,4BAAQC,QAASN,KAAKJ,kBAAtB,UACA,4BAAQU,QAASN,KAAKD,cAAtB,gB,GAvESrB,cCwBJ6B,E,uKAbb,OACE,yBAAKtC,UAAU,OACX,kBAAC,EAAD,CAAQiB,WAPG,uBAQX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWL,MAAO,CAAE2B,UAAW,QAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARQ9B,aCZE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.34ff491a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default{ \r\n    getUsers:function(){    \r\n        return (axios.get(\"https://randomuser.me/api/?results=20&nat=us\"))\r\n    }\r\n}\r\n\r\n\r\n// useEffect(()=> {\r\n//     async function getEmployees(){\r\n//         try {\r\n//             const response = await axios.get(url)\r\n//             setEmployees(response.data.results)\r\n//             setDisplayedEmployees(response.data.results)\r\n//         }\r\n//         catch (error) {\r\n//             console.log(\"error ocurred getting info from the API: \", error)\r\n//         }   \r\n//     }\r\n//     getEmployees()\r\n// },[])","import React, {setDeveloperState, developerState, useState} from 'react';\r\nimport API from \"../../utils/API\"\r\n\r\nconst Employee = ({employees}) => {\r\n\r\n    const [developerState, setDeveloperState] = React.useState({\r\n        employees: [],\r\n        order: \"descend\",\r\n        filteredEmployess: []\r\n      });\r\n\r\n    React.useEffect(() => {\r\n        API.getUsers().then(results => {\r\n          console.log(results.data.results);\r\n          setDeveloperState({\r\n            ...developerState,\r\n            employees: results.data.results,\r\n            filteredEmployees: results.data.results\r\n          });\r\n        });\r\n      }, []);\r\n\r\n    const employeeList = developerState.employees.map(employee => {\r\n        console.log(employee);\r\n        return(\r\n            <tr className=\"employee\" key={employee.id.value}>\r\n                <td>{ employee.id.value }</td>\r\n                <td>{ employee.name.first }</td>\r\n                <td>{ employee.email }</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <tbody>\r\n            { employeeList }\r\n        </tbody>\r\n    )\r\n}\r\n\r\n\r\nexport default Employee;","import React, {useState, Component, useEffect} from \"react\";\r\nimport Employee from \"../Employee\"\r\n\r\nclass Table extends Component {  \r\n\r\n    render(){\r\n        return(\r\n        <table className=\"table table-dark\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Employee Id</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Email</th>\r\n                </tr>\r\n            </thead>\r\n            <Employee />\r\n        </table>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Table;","import React from \"react\";\n\nconst Container = (props) =>  {\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction Navbar() {\n    return (\n        <nav className=\"navbar\">\n            <a href=\"/\">Welcome</a>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Header = (props)=> {\n    return(\n        <header>\n            {props.headerText}\n        </header>\n    )\n}\n\nexport default Header;\n\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Form extends Component {\n  // Setting the component's initial state\n  state = {\n    firstName: \"\",\n    lastName: \"\",\n    title: \"\"\n  };\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    const { name, value } = event.target;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    // Alert the user their first and last name, clear `this.state.firstName` and `this.state.lastName`, clearing the inputs\n    alert(`Add employee: ${this.state.firstName} ${this.state.lastName}`);\n    // this.setState({\n    //   firstName: \"\",\n    //   lastName: \"\"\n    // });\n  };\n\n  handleSearch = event => {\n    event.preventDefault()\n  }\n\n  render() {\n    // Notice how each input has a `value`, `name`, and `onChange` prop\n    return (\n      <div>\n        <p>\n          Employee's Full Name: {this.state.firstName} {this.state.lastName}\n        </p>\n        <form onSubmit={this.handleFormSubmit} className=\"form\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            id='firstName'\n            value={this.state.firstName}\n            name=\"firstName\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"First Name\"\n          />\n          <label htmlFor=\"LastName\">Last Name:</label>\n          <input\n           id='lastName'\n            value={this.state.lastName}\n            name=\"lastName\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Last Name\"\n          />\n           <label htmlFor=\"title\">Job Title:</label>\n          <input\n            id='title'\n            value={this.state.title}\n            name=\"title\"\n            onChange={this.handleInputChange}\n            type=\"text\"\n            placeholder=\"Job Title\"\n          />\n          <button onClick={this.handleFormSubmit}>Submit</button>\n          <button onClick={this.handleSearch}>Search</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from 'react';\nimport './App.css';\nimport './components/Table';\nimport Container from \"./components/Container\";\nimport Table from \"./components/Table\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\n\nconst headerText = 'Employee Directory';\n//be able to sort by at least one category\n//filter users by at least one property\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\"> \n        <Header headerText = {headerText} />\n        <Navbar />\n        <Container style={{ minHeight: \"80%\" }}>\n          <Table />\n          <Form />\n        </Container>\n    </div>\n  );\n}\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}