{"version":3,"sources":["components/Employee/index.js","components/Table/index.js","components/Container/index.js","components/Navbar/index.js","components/Header/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Employee","employeeList","employees","map","employee","console","log","className","key","id","name","title","Table","state","scope","this","Component","Container","props","style","children","Navbar","href","Header","headerText","Form","firstName","lastName","handleInputChange","event","target","value","setState","handleFormSubmit","preventDefault","alert","handleSearch","onSubmit","htmlFor","onChange","type","placeholder","onClick","App","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAoBeA,G,MAlBE,SAAC,GAAiB,IACzBC,EADwB,EAAfC,UACgBC,KAAI,SAAAC,GAE/B,OADAC,QAAQC,IAAIF,GAER,wBAAIG,UAAU,WAAWC,IAAKJ,EAASK,IACnC,4BAAML,EAASK,IACf,4BAAML,EAASM,MACf,4BAAMN,EAASO,WAI3B,OACI,+BACMV,KCcCW,E,4MAxBXC,MAAQ,CACJX,UAAY,CACR,CAAEO,GAAG,EAAGC,KAAK,cAAeC,MAAM,aAClC,CAAEF,GAAG,EAAGC,KAAK,YAAaC,MAAM,WAChC,CAAEF,GAAG,EAAGC,KAAK,gBAAiBC,MAAM,a,uDAKxC,OACA,2BAAOJ,UAAU,oBACb,+BACI,4BACI,wBAAIO,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,WAGR,kBAAC,EAAD,CAAUZ,UAAWa,KAAKF,MAAMX,iB,GAnBxBc,aCELC,EAJG,SAACC,GACjB,OAAO,yBAAKX,UAAU,YAAYY,MAAOD,EAAMC,OAAQD,EAAME,W,MCQhDC,MARf,WACI,OACI,yBAAKd,UAAU,UACX,uBAAGe,KAAK,KAAR,aCIGC,EARA,SAACL,GACZ,OACI,gCACKA,EAAMM,a,OC4EJC,G,kNA5EbZ,MAAQ,CACNa,UAAW,GACXC,SAAU,GACVhB,MAAO,I,EAGTiB,kBAAoB,SAAAC,GAAS,MAEHA,EAAMC,OAAtBpB,EAFmB,EAEnBA,KAAMqB,EAFa,EAEbA,MAGd,EAAKC,SAAL,eACGtB,EAAOqB,K,EAKZE,iBAAmB,SAAAJ,GAEjBA,EAAMK,iBAGNC,MAAM,iBAAD,OAAkB,EAAKtB,MAAMa,UAA7B,YAA0C,EAAKb,MAAMc,Y,EAO5DS,aAAe,SAAAP,GACbA,EAAMK,kB,uDAKN,OACE,6BACE,oDACyBnB,KAAKF,MAAMa,UADpC,IACgDX,KAAKF,MAAMc,UAE3D,0BAAMU,SAAUtB,KAAKkB,iBAAkB1B,UAAU,QAC/C,2BAAO+B,QAAQ,aAAf,eACA,2BACE7B,GAAG,YACHsB,MAAOhB,KAAKF,MAAMa,UAClBhB,KAAK,YACL6B,SAAUxB,KAAKa,kBACfY,KAAK,OACLC,YAAY,eAEd,2BAAOH,QAAQ,YAAf,cACA,2BACC7B,GAAG,WACFsB,MAAOhB,KAAKF,MAAMc,SAClBjB,KAAK,WACL6B,SAAUxB,KAAKa,kBACfY,KAAK,OACLC,YAAY,cAEb,2BAAOH,QAAQ,SAAf,cACD,2BACE7B,GAAG,QACHsB,MAAOhB,KAAKF,MAAMF,MAClBD,KAAK,QACL6B,SAAUxB,KAAKa,kBACfY,KAAK,OACLC,YAAY,cAEd,4BAAQC,QAAS3B,KAAKkB,kBAAtB,UACA,4BAAQS,QAAS3B,KAAKqB,cAAtB,gB,GAvESpB,cCwBJ2B,E,uKAbb,OACE,yBAAKpC,UAAU,OACX,kBAAC,EAAD,CAAQiB,WAPG,uBAQX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWL,MAAO,CAAEyB,UAAW,QAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GARQ5B,aCZE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.2960dde0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Employee = ({employees}) => {\r\n    const employeeList = employees.map(employee => {\r\n        console.log(employee);\r\n        return(\r\n            <tr className=\"employee\" key={employee.id}>\r\n                <td>{ employee.id }</td>\r\n                <td>{ employee.name }</td>\r\n                <td>{ employee.title }</td>\r\n            </tr>\r\n        )\r\n    })\r\n    return(\r\n        <tbody>\r\n            { employeeList }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default Employee;","import React, {useState, Component} from \"react\";\r\n// import getUsers from \"../../utils/API\"\r\nimport Employee from \"../Employee\"\r\n\r\nclass Table extends Component {  \r\n    state = {\r\n        employees : [\r\n            { id:1, name:'Bob Roberts', title:'Custodian' },\r\n            { id:2, name:'Jim James', title:'Cashier' },\r\n            { id:3, name:'Dick Richards', title:'Manager' }\r\n        ]\r\n    }  \r\n\r\n    render(){\r\n        return(\r\n        <table className=\"table table-dark\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">Employee Id</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Title</th>\r\n                </tr>\r\n            </thead>\r\n            <Employee employees={this.state.employees}/>\r\n        </table>\r\n        )\r\n    }   \r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\nconst Container = (props) =>  {\r\n  return <div className=\"container\" style={props.style}>{props.children}</div>;\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <a href=\"/\">Welcome</a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst Header = (props)=> {\r\n    return(\r\n        <header>\r\n            {props.headerText}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass Form extends Component {\r\n  // Setting the component's initial state\r\n  state = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    title: \"\"\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    // Getting the value and name of the input which triggered the change\r\n    const { name, value } = event.target;\r\n\r\n    // Updating the input's state\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  };\r\n\r\n\r\n  handleFormSubmit = event => {\r\n    // Preventing the default behavior of the form submit (which is to refresh the page)\r\n    event.preventDefault();\r\n\r\n    // Alert the user their first and last name, clear `this.state.firstName` and `this.state.lastName`, clearing the inputs\r\n    alert(`Add employee: ${this.state.firstName} ${this.state.lastName}`);\r\n    // this.setState({\r\n    //   firstName: \"\",\r\n    //   lastName: \"\"\r\n    // });\r\n  };\r\n\r\n  handleSearch = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  render() {\r\n    // Notice how each input has a `value`, `name`, and `onChange` prop\r\n    return (\r\n      <div>\r\n        <p>\r\n          Employee's Full Name: {this.state.firstName} {this.state.lastName}\r\n        </p>\r\n        <form onSubmit={this.handleFormSubmit} className=\"form\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            id='firstName'\r\n            value={this.state.firstName}\r\n            name=\"firstName\"\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"First Name\"\r\n          />\r\n          <label htmlFor=\"LastName\">Last Name:</label>\r\n          <input\r\n           id='lastName'\r\n            value={this.state.lastName}\r\n            name=\"lastName\"\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"Last Name\"\r\n          />\r\n           <label htmlFor=\"title\">Job Title:</label>\r\n          <input\r\n            id='title'\r\n            value={this.state.title}\r\n            name=\"title\"\r\n            onChange={this.handleInputChange}\r\n            type=\"text\"\r\n            placeholder=\"Job Title\"\r\n          />\r\n          <button onClick={this.handleFormSubmit}>Submit</button>\r\n          <button onClick={this.handleSearch}>Search</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './components/Table';\nimport Container from \"./components/Container\";\nimport Table from \"./components/Table\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\n\nconst headerText = 'Employee Directory';\n//be able to sort by at least one category\n//filter users by at least one property\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\"> \n        <Header headerText = {headerText} />\n        <Navbar />\n        <Container style={{ minHeight: \"80%\" }}>\n          <Table />\n          <Form />\n        </Container>\n    </div>\n  );\n}\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}